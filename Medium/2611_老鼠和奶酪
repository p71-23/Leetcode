#有两只老鼠和 n 块不同类型的奶酪，每块奶酪都只能被其中一只老鼠吃掉。
下标为 i 处的奶酪被吃掉的得分为：
如果第一只老鼠吃掉，则得分为 reward1[i] 。
如果第二只老鼠吃掉，则得分为 reward2[i] 。
给你一个正整数数组 reward1 ，一个正整数数组 reward2 ，和一个非负整数 k 。
请你返回第一只老鼠恰好吃掉 k 块奶酪的情况下，最大 得分为多少

int miceAndCheese(int* reward1, int reward1Size, int* reward2, int reward2Size, int k){
    typedef struct{
        int value;
        int index;
    }ss;//建立一个节点，既能记录数据值进行排序，也能记录数据初始位置
    ss sub[reward1Size];
    int compare(const void *a,const void *b)
    {
        ss *x=(ss*)a;
        ss *y=(ss*)b;
        return (x->value-y->value);
    }
    int sum=0;
    for(int i=0;i<reward1Size;i++)
    {
        sub[i].value=reward2[i]-reward1[i];
        sub[i].index=i;
    }//用reward2数组减去reward1数组的值记录差值，下一步将差值进行排序
    //也可以用reward1-reward2
    qsort(sub,reward1Size,sizeof(sub[0]),compare);
    for(int i=0;i<k;i++)
        reward2[sub[i].index]=reward1[sub[i].index];//将差值最小的前k个元素，也就是reward1更大的k个元素，将reward2数组中对应位置的元素替换成reward1数组对应位置的元素
    for(int i=0;i<reward1Size;i++)
        sum+=reward2[i];
    return sum;
}
